import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
    id 'maven-publish'
    id 'antlr'
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
    id "com.diffplug.spotless" version "6.7.2"
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        removeUnusedImports()
    }
}

archivesBaseName = "apoc"

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
    duplicatesStrategy = 'exclude'
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

generateGrammarSource {
    arguments += ["-package", "apoc.custom"]
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

shadowJar {
    mergeServiceFiles()
    archiveClassifier.set('extended')
}

// to init the submodule in case of new submodule or refresh it if exists, every time we compile 
task gitSubmoduleLoad {
    def execute = ["bash", "-c", "git submodule status apoc-core | grep -q \"^-\" && rm -r apoc-core && git submodule update --init apoc-core || git submodule update --remote apoc-core; " +
            "git update-index --assume-unchanged apoc-core"]
            .execute()
    execute.waitForProcessOutput(System.out, System.err)
}

dependencies {

    apt project(':processor')
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective   // mandatory to run @ServiceProvider based META-INF code generation

    antlr "org.antlr:antlr4:4.7.2", {
        exclude group: 'org.glassfish'
        exclude group: 'com.ibm.icu'
        exclude group: 'org.abego.treelayout'
    }

    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    def withoutJacksons = {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    // These will be dependencies packaged with the .jar
    implementation project(':common')
    implementation group: 'com.novell.ldap', name: 'jldap', version: '2009-10-07'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.15.3'
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'
    implementation group: 'us.fatehi', name: 'schemacrawler', version: '15.04.01'

    // These will be dependencies not packaged with the .jar
    // They need to be provided either through the database or in an extra .jar
    compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective
    // same version as the one included in  neo4j `lib`
    compileOnly group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '5.5.0'

    compileOnly group: 'org.apache.poi', name: 'poi', version: '5.1.0'
    compileOnly group: 'org.apache.poi', name: 'poi-ooxml', version: '5.1.0'
    compileOnly group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.10.0', {
        exclude group: 'com.google.guava', module: 'guava'
    }
    compileOnly group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.4.0', {
        exclude group: 'com.google.guava', module: 'guava'
    }
    compileOnly 'org.mongodb:mongodb-driver:3.2.2', {
        exclude group: 'io.netty'
    }
    compileOnly group: 'com.couchbase.client', name: 'java-client', version: '3.3.0', withoutJacksons
    compileOnly group: 'io.lettuce', name: 'lettuce-core', version: '6.1.1.RELEASE'
    compileOnly group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.14.0', withoutJacksons
    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.270'
    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.12.353' , withoutJacksons
    compileOnly group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.6.0'

    compileOnly group: 'org.apache.parquet', name: 'parquet-hadoop', version: '1.13.1', withoutServers
    // testImplementation analogous is not needed since is bundled via `test-utils` submodule
    compileOnly group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.1.0', withoutServers


    // These dependencies affect the tests only, they will not be packaged in the resulting .jar
    testImplementation project(':test-utils')
    testImplementation project(':core')
    testImplementation group: 'org.apache.poi', name: 'poi', version: '5.1.0'
    testImplementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.1.0'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.10.0'
    testImplementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.4.0'
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.270'
    testImplementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.6.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testImplementation group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'
    testImplementation group: 'org.mongodb', name: 'mongodb-driver', version: '3.2.2', {
        exclude group: 'io.netty'
    }
    testImplementation group: 'com.couchbase.client', name: 'java-client', version: '3.3.0', withoutJacksons
    testImplementation group: 'io.lettuce', name: 'lettuce-core', version: '6.1.1.RELEASE'
    testImplementation group: 'org.mock-server', name: 'mockserver-netty', version: '5.6.0'
    testImplementation group: 'org.mock-server', name: 'mockserver-client-java', version: '5.6.0'
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.12.353' , withoutJacksons
    testImplementation group: 'us.fatehi', name: 'schemacrawler-mysql', version: '15.04.01'
    testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.2.1'
    testImplementation group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'
    testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.2'
    testImplementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    testImplementation group: 'org.zapodot', name: 'embedded-ldap-junit', version: '0.9.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.4.0'
    testImplementation group: 'org.apache.parquet', name: 'parquet-hadoop', version: '1.13.1', withoutServers


    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

task copyImportFiles {
    copy {
        from "import"
        into "${project.rootDir}/build/import"
    }
}
tasks.shadowJar.dependsOn tasks.copyImportFiles

publishing {
    repositories {
        maven {
            name = 'pipeline'
            url = "file://${project(':extended').buildDir}/repo"
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            artifactId("apoc-extended")
            project.shadow.component(publication)
            artifact(mySourcesJar)
            artifact(myJavadocJar)
            artifact(jar)

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "neo4j-apoc-extended")
                root.appendNode("description", "Extended package for Neo4j Procedures")
                root.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def scmNode = root.appendNode("scm")
                scmNode.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def licensesNode = root.appendNode("licenses")
                def licenseNode = licensesNode.appendNode("license")
                licenseNode.appendNode("name", 'The Apache Software License, Version 2.0')
                licenseNode.appendNode("url", 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode("comments", 'Note that this license is for the project itself, and not for its dependencies.')
                licenseNode.appendNode("distribution", 'repo')

                def developersNode = root.appendNode("developers")
                def developerNode = developersNode.appendNode("developer")
                developerNode.appendNode("id", 'michaelhunger')
                developerNode.appendNode("name", 'Michael Hunger')
                developerNode.appendNode("email", 'michael.hunger@neo4j.com')

                def dependenciesNode = root.get("dependencies")[0]

                configurations.default.allDependencies.findAll {dependency -> dependency.group != "org.neo4j.procedure"}.forEach {
                    def dependency = dependenciesNode.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', "compile")

                    def myExcludeRules = it.excludeRules
                    if (myExcludeRules.size() == 0) {
                        myExcludeRules = new HashSet<>()
                    }

                    myExcludeRules.add(new DefaultExcludeRule("org.slf4j", "slf4j-nop"))

                    // for exclusions
                    if (myExcludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')
                        myExcludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('artifactId', ex.module ? ex.module : "*")
                            exclusion.appendNode('groupId', ex.group)
                        }
                    }

                }

            }

        }
    }
}


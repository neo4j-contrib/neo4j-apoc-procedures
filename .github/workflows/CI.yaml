name: CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

env:
  DOCKER_ENTERPRISE_URL: ${{ secrets.DOCKER_ENTERPRISE_DEV_URL }}
  DOCKER_COMMUNITY_URL: ${{ secrets.DOCKER_COMMUNITY_DEV_URL }}
  TEAMCITY_DEV_URL: ${{ secrets.TEAMCITY_DEV_URL }}
  TEAMCITY_USER: ${{ secrets.TEAMCITY_USER }}
  TEAMCITY_PASSWORD: ${{ secrets.TEAMCITY_PASSWORD }}
  ENTERPRISE_TAR: enterprise-docker.tar
  COMMUNITY_TAR: community-docker.tar
  
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
#      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-jdk
      - uses: ./.github/actions/setup-gradle-cache #todo - needed?
      - name: Compile
        run: ./gradlew --no-daemon --init-script init.gradle clean
        # run: ./gradlew compileJava compileTestJava #todo - maybe ./gradlew --init-script init.gradle
  
  code-ql:
    runs-on: ubuntu-latest
    needs: compile
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-jdk
      - uses: ./.github/actions/setup-gradle-cache #todo - needed?
      - name: Compile Java
        run: ./gradlew --no-daemon --init-script init.gradle clean
        # run: ./gradlew compileJava compileTestJava #todo - maybe ./gradlew --init-script init.gradle
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          
      # Autobuild attempts to build any compiled languages 
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
        
  tests:
    strategy:
      # fail-fast: false
      matrix:
        project: [ 'extended', 'extended-it' ]
    env:
      DOCKER_ENTERPRISE_DEV_URL: ${{ secrets.DOCKER_ENTERPRISE_DEV_URL }}
      DOCKER_COMMUNITY_DEV_URL: ${{ secrets.DOCKER_COMMUNITY_DEV_URL }}
      ENTERPRISE_TAR: enterprise-docker.tar
      COMMUNITY_TAR: community-docker.tar
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v2
      - name: Download neo4j dev docker container
        if: matrix.project == 'enterprise-it'
        run: |
          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_ENTERPRISE_URL} -o ${ENTERPRISE_TAR} &
          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_COMMUNITY_URL} -o ${COMMUNITY_TAR} &
          wait
          docker load --input ${ENTERPRISE_TAR}
          docker load --input ${COMMUNITY_TAR}
      - name: Run ${{ matrix.project }} tests
        uses: ./.github/actions/test-gradle-project
        
      - name: Run ${{ matrix.project }} tests
        uses: ./.github/actions/test-gradle-project
        with:
          project-name: ${{ matrix.project }}
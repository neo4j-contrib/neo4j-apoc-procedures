name: CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

env:
  DOCKER_ENTERPRISE_URL: ${{ secrets.DOCKER_ENTERPRISE_DEV_URL }}
  DOCKER_COMMUNITY_URL: ${{ secrets.DOCKER_COMMUNITY_DEV_URL }}
  TEAMCITY_DEV_URL: ${{ secrets.TEAMCITY_DEV_URL }}
  TEAMCITY_USER: ${{ secrets.TEAMCITY_USER }}
  TEAMCITY_PASSWORD: ${{ secrets.TEAMCITY_PASSWORD }}
  ENTERPRISE_TAR: enterprise-docker.tar
  COMMUNITY_TAR: community-docker.tar
  
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
#      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-jdk
      - uses: ./.github/actions/setup-gradle-cache #todo - needed?
      - name: Compile
        run: ./gradlew compileJava compileTestJava #todo - maybe ./gradlew --init-script init.gradle
  
  code-ql:
    runs-on: ubuntu-latest
    needs: compile
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-jdk
      - uses: ./.github/actions/setup-gradle-cache #todo - needed?
      - name: Compile Java
        run: ./gradlew --no-daemon --init-script init.gradle clean
        # run: ./gradlew compileJava compileTestJava #todo - maybe ./gradlew --init-script init.gradle
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          
      # Autobuild attempts to build any compiled languages 
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
        
  tests:
    strategy:
      # fail-fast: false
      matrix:
        project: [ 'common', 'core', 'processor', 'test-utils', 'it' ]
      env:
        DOCKER_ENTERPRISE_DEV_URL: ${{ secrets.DOCKER_ENTERPRISE_DEV_URL }}
        DOCKER_COMMUNITY_DEV_URL: ${{ secrets.DOCKER_COMMUNITY_DEV_URL }}
        ENTERPRISE_TAR: enterprise-docker.tar
        COMMUNITY_TAR: community-docker.tar
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v3
      - name: Download neo4j dev docker container
        if: matrix.project == 'enterprise-it'
        run: |
          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_ENTERPRISE_URL} -o ${ENTERPRISE_TAR} &
          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_COMMUNITY_URL} -o ${COMMUNITY_TAR} &
          wait
          docker load --input ${ENTERPRISE_TAR}
          docker load --input ${COMMUNITY_TAR}
      - name: Run ${{ matrix.project }} tests
        uses: ./.github/actions/test-gradle-project
      - name: Run ${{ matrix.project }} tests
        uses: ./.github/actions/test-gradle-project
        with:
          project-name: ${{ matrix.project }}
#      - name: Archive test results
#        uses: actions/upload-artifact@v2
#        if: always()
#        with:
#          name: test-results
#          path: |
#            ${{matrix.project}}/build/reports/tests/test/
       
       
       
       
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17.0.8'
#          distribution: 'temurin'
#
#      - name: Download neo4j dev docker container
#        run: |
#          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_ENTERPRISE_URL} -o ${ENTERPRISE_TAR} &
#          curl -s -L0 -u "${TEAMCITY_USER}:${TEAMCITY_PASSWORD}" -X GET ${DOCKER_COMMUNITY_URL} -o ${COMMUNITY_TAR} &
#          wait
#          docker load --input ${ENTERPRISE_TAR}
#          docker load --input ${COMMUNITY_TAR}
#
#      - uses: actions/cache@v2
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#
#      - name: Build with Gradle
#        run: |
#          chmod +x gradlew
#          ./gradlew --init-script init.gradle
#          ./gradlew build --parallel
#
#      - name: Clean neo4j artifacts
#        if: always() # run this step even if previous step failed
#        run: |
#          (find ~/.gradle/caches -name "*neo4j*" -exec rm -rf {} \;) || echo "All neo4j files cleaned"
#          rm -rf ${ENTERPRISE_TAR} ${COMMUNITY_TAR}
#
#      - name: Archive test results
#        uses: actions/upload-artifact@v2
#        if: always()
#        with:
#          name: test-results
#          path: |
#            extended/build/reports/tests/test/

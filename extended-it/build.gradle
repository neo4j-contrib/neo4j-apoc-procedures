plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
    id 'maven-publish'
    id 'antlr'
    id "org.jetbrains.kotlin.jvm" version "1.9.20"
    id "com.diffplug.spotless" version "6.7.2"
}

description = 'APOC :: Apoc Extended Integration Tests Module'

test {
    maxParallelForks = 1
}

dependencies {
    apt project(':processor')
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective   // mandatory to run @ServiceProvider based META-INF code generation

    def withoutJacksons = {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }    
    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    implementation project(":extended")
    implementation project(":extra-dependencies")
    
    testImplementation group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.26.1'
    testImplementation project(':extended').sourceSets.main.allJava

    testImplementation group: 'us.fatehi', name: 'schemacrawler-mysql', version: '16.20.8'
    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

    testImplementation project(':core')
    testImplementation project(':test-utils')
    testImplementation project(':common')
    testImplementation project(':extended')
    testImplementation project(':core').sourceSets.test.output
    compileOnly project(':extended').sourceSets.main.allJava
    testImplementation project(':extended').sourceSets.test.output
    testImplementation files(project(':extended').sourceSets.test.output)
    
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.425'
    testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.9.1'
    testImplementation group: 'com.couchbase.client', name: 'java-client', version: '3.3.0', withoutJacksons
    testImplementation group: 'io.lettuce', name: 'lettuce-core', version: '6.1.1.RELEASE'
    testImplementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.11.1', {
        exclude group: 'io.netty'
    }
    testImplementation group: 'org.apache.parquet', name: 'parquet-hadoop', version: '1.13.1', withoutServers
    
    testImplementation group: 'org.testcontainers', name: 'qdrant', version: '1.20.2'
    testImplementation group: 'org.testcontainers', name: 'chromadb', version: '1.20.2'
    testImplementation group: 'org.testcontainers', name: 'weaviate', version: '1.20.2'
    testImplementation group: 'org.testcontainers', name: 'milvus', version: '1.20.2'
    testImplementation group: 'org.apache.poi', name: 'poi', version: '5.1.0'
    testImplementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.1.0'
    testImplementation 'com.azure:azure-storage-blob:12.22.0'
    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

tasks.register('copyJars', Copy) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/allJars"
}

gradle.projectsEvaluated {
    task buildDependencies {
        println 'init fanculo...'

        allprojects.each { subproject ->
            {
                if (subproject.name == 'kafka') {
                    println("porca madonna ${subproject.name}")
                }
                println("Processing projectaa: ${subproject.name}")
            }
        }


        println project(":extra-dependencies").childProjects
        println project(":extra-dependencies").allprojects
        println project(":extra-dependencies").subprojects
        project(":extra-dependencies").allprojects.subprojects.each {
            println('it.name' + it.name)
            dependsOn("${it.name}:clean")
        }
        project(":extra-dependencies").subprojects.each { dependsOn("${it.name}:build") }
        project(":extra-dependencies").subprojects.each { dependsOn("${it.name}:shadowJar") }
        dependsOn(copyJars)
    }
}

//tasks.register('buildDependencies') {
//    println 'init...'
//    println project(":extra-dependencies").childProjects
//    println project(":extra-dependencies").allprojects
//    println project(":extra-dependencies").subprojects
//    //println project(":extra-dependencies").getAllprojects
//    project(":extra-dependencies").childProjects.each {
//        println('it.name' + it.name)
//        dependsOn("${it.name}:clean")
//    }
//    project(":extra-dependencies").subprojects.each { dependsOn("${it.name}:build") }
//    project(":extra-dependencies").subprojects.each { dependsOn("${it.name}:shadowJar") }
//    dependsOn(copyJars)
//}

tasks.register('copyApocJar', Copy) {
    println 'init1...'
    dependsOn(':extra-dependencies:buildDependencies', ':extended:shadowJar', ':core:shadowJar')
    // dependsOn()

    // todo - dire che in questo modo non funziona con extra-dependencies
    from project(':extended').tasks.shadowJar.archiveFile into layout.buildDirectory.dir('test/jar-extended')
    from project(':core').tasks.shadowJar.archiveFile into layout.buildDirectory.dir('test/jar-core')
}

//tasks.register('copyApocJar2') {
//    dependsOn(buildDependencies)
//}


//tasks.register('copyApocExtraDepsJar', Copy) {
//    //println 'IIII' + project(':extra-dependencies').tasks
//    dependsOn(':extra-dependencies:buildDependencies')
//    //println 'PD' + project(':extra-dependencies').tasks.buildDependencies
//    from project(':extra-dependencies').tasks.buildDependencies.archiveFile into layout.buildDirectory.dir('test/jar-extra')
//
////    dependsOn(project(':extra-dependencies').tasks.buildDependencies)
////    dependsOn(project(':extra-dependencies').tasks.buildDependencies)
////    dependsOn(project(':extra-dependencies').task(':buildDependencies'))
////    dependsOn(':extra-dependencies:buildDependencies')
//    //println 'EEEE' + project(':extra-dependencies').tasks
//    //dependsOn('extra-dependencies:build')
//    //println 'AAAAA' + project('extra-dependencies').tasks
//    //from project(':extra-dependencies').tasks.buildDependencies.archiveFile into layout.buildDirectory.dir('test/jar-extra')
//}


test {
    //dependsOn(copyApocExtraDepsJar)
    dependsOn(copyApocJar)
    maxParallelForks = 1
    doFirst {
        // TODO - WRITE THAT WE NEED APOC CORE PATH AS WELL, FOR TEST WITH BOTH EXTENDED AND CORE JARS
        var apocJarCorePath = layout.buildDirectory.file("test/jar-core/apoc-${version}-core.jar").get().asFile.absolutePath
        println("apoc-core.test.jar.path=$apocJarCorePath")
        systemProperty 'apoc-core.test.jar.path', apocJarCorePath
        
        var apocJarExtendedPath = layout.buildDirectory.file("test/jar-extended/apoc-${version}-extended.jar").get().asFile.absolutePath
        println("apoc-extended.test.jar.path=$apocJarExtendedPath")
        systemProperty 'apoc-extended.test.jar.path', apocJarExtendedPath

        println 'UUUU' + project(':extra-dependencies').buildDir
        println 'UUUUKKK' + "${project(':extra-dependencies').buildDir}/allJars"
        println 'UUUUKKKEEE' + new File(rootDir, "${project(':extra-dependencies').buildDir}/allJars")
        println 'UUUUKKKEEEAAAA' + new File(rootDir, "${project(':extra-dependencies').buildDir}/allJars").absolutePath
       
        var apocExtendedJarPath = "${project(':extra-dependencies').buildDir}/allJars"

        // todo - dire che in questo modo non funziona perche fa 2 volte absolute path
//        var apocExtendedJarPath = new File(rootDir, "${project(':extra-dependencies').buildDir}/allJars").absolutePath
        
        // todo - dire che in questo modo non funziona
//        var apocExtendedJarPath = project(':extra-dependencies').buildDir.file("allJars").get().asFile.absolutePath
////        var apocJarPath = layout.buildDirectory.file("test/$buildDir/allJars/apoc-aws-dependencies-${version}.jar").get().asFile.absolutePath
        println("apoc-extra-dependencies.test.jar.path=$apocExtendedJarPath")
        systemProperty 'apoc-extra-dependencies.test.jar.path', apocExtendedJarPath
    }
}

//gradle ':extra-dependencies:clean'

// project(':extended').buildDependencies

// gradle.includedBuild("extra-dependencies").task(":clean").get().execute()

// gradle copyApocExtraDepsJar


//test {
//    dependsOn(copyApocExtraDepsJar)
//    maxParallelForks = 1
//    doFirst {
//        var apocJarPath = layout.buildDirectory.file("test/jar-extra/apoc-aws-dependencies-${version}.jar").get().asFile.absolutePath
//////        var apocJarPath = layout.buildDirectory.file("test/$buildDir/allJars/apoc-aws-dependencies-${version}.jar").get().asFile.absolutePath
////        println("apoc-extra-dependencies.test.jar.path=$apocJarPath")
////        systemProperty 'apoc-extra-dependencies.test.jar.path', apocJarPath
//    }
//}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
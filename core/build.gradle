plugins {
    id 'java'
    id 'maven-publish'
    id 'antlr'
    id "com.diffplug.spotless" version "6.7.2"
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        removeUnusedImports()
    }
}

archivesBaseName = "apoc"

apply plugin: 'com.github.johnrengelman.shadow'

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
    duplicatesStrategy = 'exclude'
}


configurations {
    apt
}

shadowJar {
    archiveClassifier.set('core')
    duplicatesStrategy = 'exclude'
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}


generateGrammarSource {
    arguments += ["-package", "apoc.custom"]
}

dependencies {
    apt project(':processor')
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

    antlr "org.antlr:antlr4:4.7.2", {
        exclude group: 'org.glassfish'
        exclude group: 'com.ibm.icu'
        exclude group: 'org.abego.treelayout'
    }

    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    def withoutJacksons = {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    // These will be dependencies packaged with the .jar
    implementation project(":common")
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.6'
    implementation group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.7.17'
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation group: 'org.apache.arrow', name: 'arrow-vector', version: '7.0.0', {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'io.netty', module: 'netty-common'
    }

    // These will be dependencies not packaged with the .jar
    // They need to be provided either through the database or in an extra .jar
    compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

    // These dependencies affect the tests only, they will not be packaged in the resulting .jar
    testImplementation project(":common").sourceSets.test.output
    testImplementation project(':test-utils')
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.270'
    testImplementation group: 'org.mock-server', name: 'mockserver-netty', version: '5.6.0'
    testImplementation group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'
    testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.2'

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.testRuntimeClasspath
}
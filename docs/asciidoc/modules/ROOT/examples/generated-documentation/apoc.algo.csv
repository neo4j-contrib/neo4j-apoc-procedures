¦Qualified Name¦Type¦Release
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.aStar icon:book[]]

apoc.algo.aStar(startNode, endNode, 'KNOWS\|<WORKS_WITH\|IS_MANAGER_OF>', 'distance','lat','lon') YIELD path, weight - run A* with relationship property name as cost function
|label:procedure[]
|label:apoc-core[]
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.aStarConfig icon:book[]]

apoc.algo.aStar(startNode, endNode, 'KNOWS\|<WORKS_WITH\|IS_MANAGER_OF>', {weight:'dist',default:10,x:'lon',y:'lat'}) YIELD path, weight - run A* with relationship property name as cost function
|label:procedure[]
|label:apoc-core[]
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.allSimplePaths icon:book[]]

apoc.algo.allSimplePaths(startNode, endNode, 'KNOWS\|<WORKS_WITH\|IS_MANAGER_OF>', 5) YIELD path, weight - run allSimplePaths with relationships given and maxNodes
|label:procedure[]
|label:apoc-core[]
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.cover icon:book[]]

apoc.algo.cover(nodes) yield rel - returns all relationships between this set of nodes
|label:procedure[]
|label:apoc-core[]
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.dijkstra icon:book[]]

apoc.algo.dijkstra(startNode, endNode, 'KNOWS\|<WORKS_WITH\|IS_MANAGER_OF>', 'distance', defaultValue, numberOfWantedResults) YIELD path, weight - run dijkstra with relationship property name as cost function
|label:procedure[]
|label:apoc-core[]
|xref::overview/apoc.algo/apoc.algo.adoc[apoc.algo.dijkstraWithDefaultWeight icon:book[]]

apoc.algo.dijkstraWithDefaultWeight(startNode, endNode, 'KNOWS\|<WORKS_WITH\|IS_MANAGER_OF>', 'distance', 10) YIELD path, weight - run dijkstra with relationship property name as cost function and a default weight if the property does not exist
|label:procedure[]
|label:apoc-core[]

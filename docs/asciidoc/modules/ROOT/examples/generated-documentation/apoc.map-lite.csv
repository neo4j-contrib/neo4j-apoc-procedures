¦signature
¦apoc.map.clean(map :: MAP?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)
¦apoc.map.flatten(map :: MAP?, delimiter = . :: STRING?) :: (MAP?)
¦apoc.map.fromLists(keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)
¦apoc.map.fromNodes(label :: STRING?, property :: STRING?) :: (MAP?)
¦apoc.map.fromPairs(pairs :: LIST? OF LIST? OF ANY?) :: (MAP?)
¦apoc.map.fromValues(values :: LIST? OF ANY?) :: (MAP?)
¦apoc.map.get(map :: MAP?, key :: STRING?, value = null :: ANY?, fail = true :: BOOLEAN?) :: (ANY?)
¦apoc.map.groupBy(values :: LIST? OF ANY?, key :: STRING?) :: (MAP?)
¦apoc.map.groupByMulti(values :: LIST? OF ANY?, key :: STRING?) :: (MAP?)
¦apoc.map.merge(first :: MAP?, second :: MAP?) :: (MAP?)
¦apoc.map.mergeList(maps :: LIST? OF MAP?) :: (MAP?)
¦apoc.map.mget(map :: MAP?, keys :: LIST? OF STRING?, values = [] :: LIST? OF ANY?, fail = true :: BOOLEAN?) :: (LIST? OF ANY?)
¦apoc.map.removeKey(map :: MAP?, key :: STRING?, config = {} :: MAP?) :: (MAP?)
¦apoc.map.removeKeys(map :: MAP?, keys :: LIST? OF STRING?, config = {} :: MAP?) :: (MAP?)
¦apoc.map.setEntry(map :: MAP?, key :: STRING?, value :: ANY?) :: (MAP?)
¦apoc.map.setKey(map :: MAP?, key :: STRING?, value :: ANY?) :: (MAP?)
¦apoc.map.setLists(map :: MAP?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)
¦apoc.map.setPairs(map :: MAP?, pairs :: LIST? OF LIST? OF ANY?) :: (MAP?)
¦apoc.map.setValues(map :: MAP?, pairs :: LIST? OF ANY?) :: (MAP?)
¦apoc.map.sortedProperties(map :: MAP?, ignoreCase = true :: BOOLEAN?) :: (LIST? OF ANY?)
¦apoc.map.submap(map :: MAP?, keys :: LIST? OF STRING?, values = [] :: LIST? OF ANY?, fail = true :: BOOLEAN?) :: (MAP?)
¦apoc.map.unflatten(map :: MAP?, delimiter = . :: STRING?) :: (MAP?)
¦apoc.map.updateTree(tree :: MAP?, key :: STRING?, data :: LIST? OF LIST? OF ANY?) :: (MAP?)
¦apoc.map.values(map :: MAP?, keys = [] :: LIST? OF STRING?, addNullsForMissing = false :: BOOLEAN?) :: (LIST? OF ANY?)

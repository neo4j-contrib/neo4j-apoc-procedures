¦signature
¦apoc.convert.setJsonProperty(node :: NODE?, key :: STRING?, value :: ANY?) :: VOID
¦apoc.convert.toTree(paths :: LIST? OF PATH?, lowerCaseRels = true :: BOOLEAN?, config = {} :: MAP?) :: (value :: MAP?)
¦apoc.convert.fromJsonList(list :: STRING?, path =  :: STRING?, pathOptions = null :: LIST? OF STRING?) :: (LIST? OF ANY?)
¦apoc.convert.fromJsonMap(map :: STRING?, path =  :: STRING?, pathOptions = null :: LIST? OF STRING?) :: (MAP?)
¦apoc.convert.getJsonProperty(node :: NODE?, key :: STRING?, path =  :: STRING?, pathOptions = null :: LIST? OF STRING?) :: (ANY?)
¦apoc.convert.getJsonPropertyMap(node :: NODE?, key :: STRING?, path =  :: STRING?, pathOptions = null :: LIST? OF STRING?) :: (MAP?)
¦apoc.convert.toBoolean(bool :: ANY?) :: (BOOLEAN?)
¦apoc.convert.toBooleanList(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toFloat(object :: ANY?) :: (FLOAT?)
¦apoc.convert.toIntList(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toInteger(object :: ANY?) :: (INTEGER?)
¦apoc.convert.toJson(value :: ANY?) :: (STRING?)
¦apoc.convert.toList(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toMap(map :: ANY?) :: (MAP?)
¦apoc.convert.toNode(node :: ANY?) :: (NODE?)
¦apoc.convert.toNodeList(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toRelationship(relationship :: ANY?) :: (RELATIONSHIP?)
¦apoc.convert.toRelationshipList(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toSet(list :: ANY?) :: (LIST? OF ANY?)
¦apoc.convert.toSortedJsonMap(value :: ANY?, ignoreCase = true :: BOOLEAN?) :: (STRING?)
¦apoc.convert.toString(string :: ANY?) :: (STRING?)
¦apoc.convert.toStringList(list :: ANY?) :: (LIST? OF ANY?)

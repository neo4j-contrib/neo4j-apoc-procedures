plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.0'  apply false
    id 'maven-publish'
    id 'antlr'
    id "com.github.hierynomus.license-report" version"0.16.1"
    id "org.jetbrains.kotlin.jvm" version "1.9.20" apply false
}

downloadLicenses {
    excludeDependencies = [
            'org.neo4j.*'
    ]
}

allprojects {
    group = 'org.neo4j.procedure'
    version = '2025.10.0'
    archivesBaseName = 'apoc'
    description = """neo4j-apoc-procedures"""
}

apply plugin: 'java-library'
if (System.env.CI != null && System.getenv("CODEARTIFACT_DOWNLOAD_URL") ?: "" != "")
    apply from: 'teamcity-repository.gradle'

repositories {

    /*maven {  // this contains the neo4j 4.0.0-beta jars
    url "https://neo4j.bintray.com/community/"
}*/
    if (System.getenv("CODEARTIFACT_DOWNLOAD_URL") ?: "" != "") {
        maven {
            url System.getenv('CODEARTIFACT_DOWNLOAD_URL')
            credentials {
                username System.getenv('CODEARTIFACT_USERNAME')
                password System.getenv('CODEARTIFACT_TOKEN')
            }
        }
    } else {
        mavenCentral()
    }
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
    mavenLocal()
}

subprojects {
    apply plugin: 'java-library'

    repositories {

        /*maven {  // this contains the neo4j 4.0.0-beta jars
        url "https://neo4j.bintray.com/community/"
    }*/
        if (System.getenv("CODEARTIFACT_DOWNLOAD_URL") ?: "" != "") {
            maven {
                url System.getenv('CODEARTIFACT_DOWNLOAD_URL')
                credentials {
                    username System.getenv('CODEARTIFACT_USERNAME')
                    password System.getenv('CODEARTIFACT_TOKEN')
                }
            }
        } else {
            mavenCentral()
        }
        maven {
            url "https://repo.gradle.org/gradle/libs-releases"
        }
        mavenLocal()
    }


    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    task mySourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task myJavadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }
    test {
        //exclude '**/CypherProceduresClusterTest.class'//, '**/AtomicTest.class'

        // neo4jDockerImage system property is used in TestContainerUtil
        systemProperties 'user.language' : 'en' ,
                'user.country' : 'US',
                'neo4jDockerImage': project.hasProperty("neo4jDockerEeOverride") ? project.getProperty("neo4jDockerEeOverride") : 'neo4j:2025.10.0-enterprise',
                'neo4jCommunityDockerImage': project.hasProperty("neo4jDockerCeOverride") ? project.getProperty("neo4jDockerCeOverride") : 'neo4j:2025.10.0',
                'coreDir': 'apoc-core/core',
                'testDockerBundle': false,
                'org.neo4j.io.pagecache.tracing.cursor.DefaultPageCursorTracer.CHECK_REPORTED_COUNTERS': 'true' // Extra assertions in kernel

        maxHeapSize = "5G"
        forkEvery = 50
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        minHeapSize = "128m"

        // This would apply only to TeamCity
        // We need to ignore the failures because we may have tests muted
        if (System.env.TEAMCITY_VERSION != null) {
            ignoreFailures(true)
            if (project.hasProperty('excludeSeleniumTests')) {
                exclude '**/LoadHtmlTest*'
                exclude '**/LoadHtmlTestParameterized*'
            }
        }

        if (System.env.TEAMCITY_VERSION != null || System.env.CI != null) {
            exclude '**/*HdfsTest*'
        }

        jvmArgs = [ "--add-opens", "java.base/java.lang=ALL-UNNAMED",
                    "--add-opens", "java.base/java.nio=ALL-UNNAMED",
                    "--add-opens", "java.base/java.io=ALL-UNNAMED",
                    "--add-opens", "java.base/java.util=ALL-UNNAMED",
                    "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
                    "--add-opens", "java.base/sun.net.www.protocol.http=ALL-UNNAMED",
                    "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.tools.javac=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.doctree=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.tree=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.util=ALL-UNNAMED" ]

        filter {
            setFailOnNoMatchingTests(false)
        }

        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    configurations {
        apt
    }


    compileJava {
        options.annotationProcessorPath = configurations.apt
        options.compilerArgs += ["-AIgnoreContextWarnings"]
        options.encoding = "UTF-8"
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

}

ext {
    // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic
    neo4jVersion = "2025.10.0"
    // instead we apply the override logic here
    neo4jVersionEffective = project.hasProperty("neo4jVersionOverride") ? project.getProperty("neo4jVersionOverride") : neo4jVersion
    testContainersVersion = '1.20.2'
    apacheArrowVersion = '15.0.0'
}

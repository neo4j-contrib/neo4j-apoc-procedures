plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'  apply false
    id 'maven-publish'
    id "com.github.hierynomus.license-report" version"0.16.1"
}

downloadLicenses {
    excludeDependencies = [
            'org.neo4j.*'
    ]
}

allprojects {
    group = 'org.neo4j.procedure'
    version = '4.4.0.23'
    base {
        archivesName = 'apoc'
    }
    description = """neo4j-apoc-procedures"""
}

apply plugin: 'java-library'

if (System.env.CI != null)
    apply from: 'teamcity-repository.gradle'

repositories {

    /*maven {  // this contains the neo4j 4.0.0-beta jars
    url "https://neo4j.bintray.com/community/"
}*/
    mavenCentral()
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
    mavenLocal()
}

subprojects {
    apply plugin: 'java-library'

    repositories {

        /*maven {  // this contains the neo4j 4.0.0-beta jars
        url "https://neo4j.bintray.com/community/"
    }*/
        mavenCentral()
        maven {
            url "https://repo.gradle.org/gradle/libs-releases"
        }
        mavenLocal()
    }


    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    task mySourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
        dependsOn(':full:generateGrammarSource')
    }

    task myJavadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }
    test {
        //exclude '**/CypherProceduresClusterTest.class'//, '**/AtomicTest.class'

        // neo4jDockerImage system property is used in TestContainerUtil
        systemProperties 'user.language' : 'en' ,
                'user.country ' : 'US',
                'neo4jDockerImage' : project.hasProperty("neo4jDockerVersionOverride") ? 'neo4j:' + project.getProperty("neo4jDockerVersionOverride") + '-enterprise-debian' : 'neo4j:4.4.27-enterprise-debian',
                'neo4jCommunityDockerImage': project.hasProperty("neo4jDockerVersionOverride") ? 'neo4j:' + project.getProperty("neo4jDockerVersionOverride") + '-debian': 'neo4j:4.4.27-debian'

        maxHeapSize = "5G"
        forkEvery = 50
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        minHeapSize = "128m"

        // This would apply only to TeamCity
        // We need to ignore the failures because we may have tests muted
        if (System.env.TEAMCITY_VERSION != null) {
            ignoreFailures(true)
            if (project.hasProperty('excludeSeleniumTests')) {
                exclude '**/LoadHtmlTest*'
                exclude '**/LoadHtmlTestParameterized*'
            }
        }

        filter {
            setFailOnNoMatchingTests(false)
        }

        // in TC we don't have the CI env so we can manage it in this way
        if (System.env.TEAMCITY_VERSION != null) {
            ignoreFailures(true)
        }
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    configurations {
        apt
    }


    compileJava {
        options.annotationProcessorPath = configurations.apt
        options.compilerArgs += ["-AIgnoreContextWarnings"]
    }

}

apply from: "licenses-3rdparties.gradle"

ext {
    publicDir =  "${project.rootDir}"
    // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic
    neo4jVersion = "4.4.27"
    // instead we apply the override logic here
    neo4jVersionEffective = project.hasProperty("neo4jVersionOverride") ? project.getProperty("neo4jVersionOverride") : neo4jVersion
    testContainersVersion = '1.17.6'
}

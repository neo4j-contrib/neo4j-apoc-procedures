plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.0'  apply false
    id 'maven-publish'
    id 'antlr'
    id "org.sonarqube" version "2.7"
    id "com.github.hierynomus.license-report" version"0.16.1"
}

downloadLicenses {
    excludeDependencies = [
            'org.neo4j.*'
    ]
}

allprojects {
    group = 'org.neo4j.procedure'
    version = project.hasProperty("neo4jVersionOverride") ? project.getProperty("neo4jVersionOverride") : '4.3.0-rc01'
    archivesBaseName = 'apoc'
    description = """neo4j-apoc-procedures"""
}

apply plugin: 'java-library'
if (System.env.CI != null)
    apply from: 'teamcity-repository.gradle'

repositories {

    /*maven {  // this contains the neo4j 4.0.0-beta jars
    url "https://neo4j.bintray.com/community/"
}*/
    mavenCentral()
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
    mavenLocal()
}

subprojects {
    apply plugin: 'java-library'

    repositories {

        /*maven {  // this contains the neo4j 4.0.0-beta jars
        url "https://neo4j.bintray.com/community/"
    }*/
        mavenCentral()
        maven {
            url "https://repo.gradle.org/gradle/libs-releases"
        }
        mavenLocal()
    }


    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    task mySourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task myJavadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }
    test {
        //exclude '**/CypherProceduresClusterTest.class'//, '**/AtomicTest.class'

        // neo4jDockerImage system property is used in TestContainerUtil
        systemProperties 'user.language' : 'en' ,
                'user.country ' : 'US',
                'neo4jDockerImage' : System.getProperty("NEO4JVERSION") ? 'neo4j:' + System.getProperty("NEO4JVERSION") + '-enterprise' : 'neo4j:5.0.0-dev-enterprise',
                'neo4jCommunityDockerImage': System.getProperty("NEO4JVERSION") ? 'neo4j:' + System.getProperty("NEO4JVERSION") : 'neo4j:5.0.0-dev'

        maxHeapSize = "8G"
        forkEvery = 50
        maxParallelForks = 1 //Runtime.runtime.availableProcessors().intdiv(2) + 1

        // This would apply only to GitHub Actions
        if (System.env.CI != null) {
            minHeapSize = "128m"
            maxHeapSize = "512m"
        }

        // This would apply only to TeamCity
        // We need to ignore the failures because we may have tests muted
        if (System.env.TEAMCITY_VERSION != null) {
            ignoreFailures(true)
        }

        jvmArgs = [ "--add-opens", "java.base/java.lang=ALL-UNNAMED",
                    "--add-opens", "java.base/java.nio=ALL-UNNAMED",
                    "--add-opens", "java.base/java.io=ALL-UNNAMED",
                    "--add-opens", "java.base/java.util=ALL-UNNAMED",
                    "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
                    "--add-opens", "java.base/sun.net.www.protocol.http=ALL-UNNAMED",
                    "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.tools.javac=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.doctree=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.tree=ALL-UNNAMED",
                    "--add-opens", "jdk.compiler/com.sun.source.util=ALL-UNNAMED" ]

        filter {
            setFailOnNoMatchingTests(false)
        }

        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    configurations {
        apt
    }


    compileJava {
        options.annotationProcessorPath = configurations.apt
        options.compilerArgs += ["-AIgnoreContextWarnings"]
        options.encoding = "UTF-8"
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

}

ext {
    // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic
    neo4jVersion = "5.0.0"
    // This should be removed when the version is stable and released
    neo4jInDevVersion = (System.env.CI != null) ? neo4jVersion + "-dev" : neo4jVersion + "-SNAPSHOT"
    // instead we apply the override logic here
    neo4jVersionEffective = project.hasProperty("neo4jVersionOverride") ? project.getProperty("neo4jVersionOverride") : neo4jInDevVersion
    testContainersVersion = '1.16.2'
}

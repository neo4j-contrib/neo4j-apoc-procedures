import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.security.MessageDigest

/**
 * Get all the Neo4j releases
 * The source of truth is https://repo1.maven.org/maven2/org/neo4j/neo4j-kernel/
 * We don't consider all the tags with "prerelease" attribute to true
 *
 * @return
 */
def collectNeo4jReleases() {
    def url = new URL("https://repo1.maven.org/maven2/org/neo4j/neo4j-kernel/maven-metadata.xml")
    def xmlString = url.getText()

    def rootNode = new XmlParser().parseText(xmlString)
    def releases = []

    def versions = rootNode.versioning.versions.version

    for (a in versions) {
        def version = a.value()
        def size = version.size()
        if (size > 0) {
            releases.add(version.get(0))
        }
    }

    // We sort considering that X.Y.Z-SOMETHING should be considered lower than X.Y.Z --> it's not a lexicographical ordering
    return releases
            .findAll { it >= "3.0" }
            .sort{ o1, o2 -> orderVersion(o1) <=> orderVersion(o2) }
            .reverse()
}

def orderVersion(str) {
  return str.split("[.-]").collect{ it =~ "^\\d+\$" ? it.padLeft(4,"0") : it.replace("beta","mbeta").replace("BETA","MBETA") }.join(".") + "/"
}
/**
 * Coupling Neo4j with APOC
 *
 * There are two heuristic in place:
 *
 * - latest version of Neo4j with latest version of APOC
 * - if there is no available version of APOC for a given NEO4j release than take the prior available version of APOC
 */

def apocReleases(neo4jReleases) {
    def slurper = new JsonSlurper()

    // get tags
    def pattern = ~/neo4jVersion\s*=\s*"(.*)".*/
    def releases = slurper.parseText(new URL("https://api.github.com/repos/neo4j-contrib/neo4j-apoc-procedures/releases?page=1&per_page=500").getText())
    def neo4jToApoc = [:]
    def latestApoc, oldestApoc
    for (release in releases) {
        if (release.prerelease || release.draft) continue;
        def tagName = release.tag_name > "5.1.0" ? release.tag_name.split("\\.")[0,1].join(".") : release.tag_name
        def buildText = new URL("https://raw.githubusercontent.com/neo4j-contrib/neo4j-apoc-procedures/" + tagName + "/build.gradle").getText()
        def matcher = pattern.matcher(buildText)
        for (def i = 0; i < matcher.getCount(); i++) {
            def neo4jVersion = matcher[i][1]

            println "neo " + neo4jVersion + ", apoc " + release.tag_name
            if (!neo4jToApoc.containsKey(neo4jVersion)) {
                neo4jToApoc[neo4jVersion] = release.tag_name
            }

            if (latestApoc == null) {
                latestApoc = release.tag_name
            }

            oldestApoc = release.tag_name
        }
    }

    return [
            oldestApoc: oldestApoc,
            latestApoc: latestApoc,
            neo4jToApoc: neo4jToApoc,
            releases: releases.findAll { !(it.prerelease || it.draft)}
    ]
}

def findApocVersion(neo4jToApoc, neo4jRelease, prefix) {
    def apocVersion = neo4jToApoc[neo4jRelease]

    // If there is no APOC release for a Neo4j release we have to guess which one to associate
    if (apocVersion == null) {
        def matchingNeo4jVersions = neo4jToApoc.keySet().findAll{ it.substring(0,4) == prefix }.sort{ o1, o2 -> orderVersion(o1) <=> orderVersion(o2) }
        def matchingApocVersions = neo4jToApoc.subMap(matchingNeo4jVersions).values().sort{ o1, o2 -> orderVersion(o1) <=> orderVersion(o2) }
        matchingNeo4jVersions = matchingNeo4jVersions.findAll{ orderVersion(it) < orderVersion(neo4jRelease) }
        def matchingNeo4jVersion = matchingNeo4jVersions.isEmpty() ? null : matchingNeo4jVersions[-1]
        def firstApocVersion = matchingApocVersions.isEmpty() ? null : matchingApocVersions[0]
        apocVersion = neo4jToApoc[matchingNeo4jVersion]==null ? firstApocVersion : neo4jToApoc[matchingNeo4jVersion]
    }
    return apocVersion
};

task versions <<  {
    def neo4jReleases = collectNeo4jReleases()
    def apocReleases = apocReleases()
    def oldestApoc = apocReleases.oldestApoc
    def latestApoc = apocReleases.latestApoc
    def neo4jToApoc = apocReleases.neo4jToApoc
    def releases = apocReleases.releases

    println "LATEST APOC IS " + latestApoc + " WHILE OLDEST IS " + oldestApoc
    println(neo4jToApoc)
    println(neo4jReleases)

    def jsonSlurper = new JsonSlurper()
    def checksums = jsonSlurper.parse(new File(projectDir, "checksums.json"))

    def versions = []
    for (neo4jRelease in neo4jReleases) {
        def prefix = neo4jRelease.substring(0,Math.min(4,neo4jRelease.length()))
        if (prefix < "3.0") continue;

        def apocVersion = findApocVersion(neo4jToApoc, neo4jRelease, prefix)
        if (apocVersion != null) {

            def url = releases.find { it.tag_name == apocVersion}.assets.find { it.browser_download_url.contains("apoc-${apocVersion}")}.browser_download_url

            def version = [ neo4j : neo4jRelease, neo4jVersion : neo4jRelease,
                            apoc : apocVersion, version: apocVersion,
                            url : "http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/" + apocVersion,
                            homepageUrl : "http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/" + apocVersion,
                            jar: url, downloadUrl: url
            ]

            if(checksums[apocVersion]) {
                version["sha1"] =  checksums[apocVersion].sha1
                version["sha256"] =  checksums[apocVersion].sha256
                version["md5"] =  checksums[apocVersion].md5
            }

            version["config"] = [
                "+:dbms.security.procedures.unrestricted": ["apoc.*"]
            ]

            versions.add(version)
        }
    }

    def versionsFile = new File(projectDir,"build/versions.json")

    versionsFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(versions)))
};

task checksums <<  {
    def jsonSlurper = new JsonSlurper()
    def values = jsonSlurper.parse(new File(projectDir, "checksums.json"))
    def apocReleases = apocReleases().releases

    for(apocRelease in apocReleases) {
        def apocVersion = apocRelease.tag_name

        if(values.containsKey(apocVersion)) {
            println("skipping: " + apocVersion)
            continue;
        }

        def assets = apocRelease.assets.find { it.browser_download_url.contains("apoc-${apocVersion}")}

        def fileName = "apoc-${apocVersion}-all.jar"
        def url = assets.browser_download_url
        def f = new File(fileName)

        if (!f.exists()) {
            new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        println("sha1: " + Checksum.getSha1sum(f))
        println("sha256: " + Checksum.getSha256sum(f))
        println("md5: " + Checksum.getMD5sum(f))


        values[apocVersion] = [sha1: Checksum.getSha1sum(f), sha256: Checksum.getSha256sum(f), md5: Checksum.getMD5sum(f)]
    }

    def checksumsFile = new File(projectDir, "build/checksums.json")
    checksumsFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(values)))
}

class Checksum {
    static getSha1sum(file) {
        return getChecksum(file, "SHA1")
    }

    static getSha256sum(file) {
        return getChecksum(file, "SHA-256")
    }

    static getMD5sum(file) {
        return getChecksum(file, "MD5")
    }

    static getChecksum(file, type) {
        def digest = MessageDigest.getInstance(type)
        def inputstream = file.newInputStream()
        def buffer = new byte[16384]
        def len

        while((len=inputstream.read(buffer)) > 0) {
            digest.update(buffer, 0, len)
        }
        def sha1sum = digest.digest()

        def result = ""
        for(byte b : sha1sum) {
            result += toHex(b)
        }
        return result
    }

    private static hexChr(int b) {
        return Integer.toHexString(b & 0xF)
    }

    private static toHex(int b) {
        return hexChr((b & 0xF0) >> 4) + hexChr(b & 0x0F)
    }

    static def main(args) {
        def sha1sum = Checksum.getSha1sum(new File(args[0]))
        println "file($args[0]): sha1sum($sha1sum)"
    }

}



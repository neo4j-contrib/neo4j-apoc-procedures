import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
    id 'maven-publish'
    id 'antlr'
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
}

base {
    archivesName = "apoc"
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    dependsOn(generateGrammarSource)
}

compileTestKotlin {
    dependsOn(generateTestGrammarSource)
}

generateGrammarSource {
    arguments += ["-package", "apoc.custom"]
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

shadowJar {
    mergeServiceFiles()
    archiveClassifier.set('all')
}

dependencies {
    implementation project(":core")
    apt project(":processor")
    testImplementation project(':test-utils')

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib"
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective   // mandatory to run @ServiceProvider based META-INF code generation
//    compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'
    compileOnly group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '4.4.14'
    implementation group: 'com.novell.ldap', name: 'jldap', version: '2009-10-07'

    // If updated check if the transitive dependency to org.antlr:ST4:4.1 has also updated
    // and remove the manual licensing check for it in licenses-3rdparties.gradle
    antlr "org.antlr:antlr4:4.7.2", {
        exclude group: 'org.glassfish'
        exclude group: 'com.ibm.icu'
        exclude group: 'org.abego.treelayout'
    }
    // compileOnly "org.antlr:antlr4-runtime:4.7.2"
    // testCompile "org.antlr:antlr4-runtime:4.7.2"

    compileOnly "org.apache.poi:poi:5.1.0"
    testImplementation "org.apache.poi:poi:5.1.0"
    compileOnly "org.apache.poi:poi-ooxml:5.1.0"
    testImplementation "org.apache.poi:poi-ooxml:5.1.0"

    implementation 'org.jsoup:jsoup:1.15.3'

    // currently we cannot update selenium to the latest version due to guava minimum version required (31.0.1-jre)
    compileOnly group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59', { exclude group: 'com.google.guava', module: 'guava' }
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59', { exclude group: 'com.google.guava', module: 'guava' }
    compileOnly group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.1.0'
    testImplementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.1.0'

    implementation group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.7.17'
    implementation(group: 'org.apache.commons', name: 'commons-configuration2', version: '2.10.1') {
        exclude group: "org.yaml"
        exclude module: "snakeyaml"
        exclude module: "commons-lang3"
        exclude module: "commons-text"
    }
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'

    testImplementation 'net.sourceforge.jexcelapi:jxl:2.6.12'

    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.770'
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.770'

    testImplementation group: 'org.reflections', name: 'reflections', version: '0.9.12'

    testImplementation group: 'org.neo4j.test', name: 'neo4j-harness', version: neo4jVersionEffective
    testImplementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.2.22.v20170606'
    testImplementation group: 'org.apache.derby', name: 'derby', version: '10.14.2.0'

    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.3.3'

    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    def withoutJacksons = {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    compileOnly group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.11.1', {
        exclude group: 'io.netty'
    }
    testImplementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.11.1', {
        exclude group: 'io.netty'
    }

    compileOnly group: 'com.couchbase.client', name: 'java-client', version: '3.3.0', withoutJacksons
    testImplementation group: 'com.couchbase.client', name: 'java-client', version: '3.3.0', withoutJacksons

    compileOnly group: 'io.lettuce', name: 'lettuce-core', version: '6.2.5.RELEASE'
    testImplementation group: 'io.lettuce', name: 'lettuce-core', version: '6.2.5.RELEASE'

    compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

    compileOnly group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.17.2', withoutJacksons
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0'

    testImplementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.17.2', withoutJacksons
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0'

    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'

    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.12.770' , withoutJacksons
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.12.770' , withoutJacksons

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.17.0', withoutJacksons
    
    compileOnly group: 'org.ow2.asm', name: 'asm', version: '5.0.2'

    // schemacrawler
    implementation group: 'us.fatehi', name: 'schemacrawler', version: '15.04.01'
    testImplementation group: 'us.fatehi', name: 'schemacrawler-mysql', version: '15.04.01'

    testImplementation group: 'org.apache.hive', name: 'hive-jdbc', version: '1.2.2', withoutServers

    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.2.1'
    testImplementation group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'

    testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.17.2'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'

    compileOnly group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.29.1'
    testImplementation group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.29.1', {
        exclude group: 'com.google.guava', module: 'guava'
    }

    compileOnly group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    testImplementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    testImplementation group: 'org.zapodot', name: 'embedded-ldap-junit', version: '0.9.0'

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }
}



// tweaks for CI
if (System.env.CI == 'true') {
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'pipeline'
            url = "file://${project(':full').buildDir}/repo"
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            artifactId("apoc")
            project.shadow.component(publication)
            artifact(mySourcesJar)
            artifact(myJavadocJar)

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "neo4j-apoc-procedure")
                root.appendNode("description", "A collection of useful Neo4j Procedures")
                root.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def scmNode = root.appendNode("scm")
                scmNode.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def licensesNode = root.appendNode("licenses")
                def licenseNode = licensesNode.appendNode("license")
                licenseNode.appendNode("name", 'The Apache Software License, Version 2.0')
                licenseNode.appendNode("url", 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode("comments", 'Note that this license is for the project itself, and not for its dependencies.')
                licenseNode.appendNode("distribution", 'repo')

                def developersNode = root.appendNode("developers")
                def developerNode = developersNode.appendNode("developer")
                developerNode.appendNode("id", 'michaelhunger')
                developerNode.appendNode("name", 'Michael Hunger')
                developerNode.appendNode("email", 'michael.hunger@neo4j.com')

                def dependenciesNode = root.get("dependencies")[0]

                configurations.default.allDependencies.findAll {dependency -> dependency.group != "org.neo4j.procedure"}.forEach {
                    def dependency = dependenciesNode.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', "compile")

                    def myExcludeRules = it.excludeRules
                    if (myExcludeRules.size() == 0) {
                        myExcludeRules = new HashSet<>()
                    }

                    myExcludeRules.add(new DefaultExcludeRule("org.slf4j", "slf4j-nop"))

                    // for exclusions
                    if (myExcludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')
                        myExcludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('artifactId', ex.module ? ex.module : "*")
                            exclusion.appendNode('groupId', ex.group)
                        }
                    }

                }

            }

        }
    }
}

